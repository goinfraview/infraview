/* eslint @typescript-eslint/consistent-type-definitions: 0 */
/* eslint @typescript-eslint/naming-convention: 0 */

import Chip from '@mui/joy/Chip';
import Typography from '@mui/joy/Typography';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';

import {
  type ColumnDef,
} from '@tanstack/react-table';

import { type TrivyVulnerability } from '../../types';
import { sortVulnerabilitiesByCVSS, getSeverityColor } from './utils';
import { Box } from '@mui/joy';

export const columns: Array<ColumnDef<TrivyVulnerability>> = [
  {
    id: 'expand',
    header: '',
    accessorKey: 'expand',
    enableColumnFilter: false,
    enableGlobalFilter: false,
    size: 40,
    cell: ({ row }) => (
      <Box sx={{ display: 'flex', justifyContent: 'center' }}>
        {row.getIsExpanded() ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
      </Box>
    ),
  },
  {
    id: 'VulnerabilityID',
    header: 'Vulnerability',
    accessorKey: 'VulnerabilityID',
    size: 200,
    filterFn: 'includesString',
    meta: {
      filterVariant: 'select',
    },
  },
  {
    id: 'Severity',
    header: 'Severity',
    accessorKey: 'Severity',
    size: 160,
    meta: {
      align: 'center',
      filterVariant: 'multiselect',
      selectOptions: {
        options: [
          { label: 'CRITICAL', value: 'CRITICAL', color: getSeverityColor('CRITICAL') },
          { label: 'HIGH', value: 'HIGH', color: getSeverityColor('HIGH') },
          { label: 'MEDIUM', value: 'MEDIUM', color: getSeverityColor('MEDIUM') },
          { label: 'LOW', value: 'LOW', color: getSeverityColor('LOW') },
          { label: 'INFO', value: 'INFO', color: getSeverityColor('INFO') },
        ],
        display: 'chip',
      },
    },
    filterFn: (row, columnId, filterValue: string[]) => {
      return filterValue.includes(row.getValue(columnId));
    },
    sortingFn: (rowA, rowB, columnId) => sortVulnerabilitiesByCVSS(rowA, rowB, columnId),
    cell: ({ getValue }) => (
      <Chip
        variant="soft"
        size="sm"
        sx={{
          borderRadius: 'sm',
        }}
        color={getSeverityColor(getValue<string>())}
      >
        {getValue<string>()}
      </Chip>
    ),
  },
  {
    id: 'Score',
    header: 'CVSS Score',
    accessorKey: 'CVSS.nvd.V3Score',
    sortUndefined: -1,
    size: 160,
    meta: {
      align: 'center',
      filterVariant: 'range',
      rangeOptions: {
        min: 0,
        max: 10,
        step: 0.1,
        marks: [
          // cvss score range marks
          { value: 1, label: 'Low' },
          { value: 4, label: 'Medium' },
          { value: 7, label: 'High' },
          { value: 9, label: 'Critical' },
        ],
      },
    },
    filterFn: 'inNumberRange',
  },
  {
    id: 'PkgName',
    header: 'Package',
    accessorKey: 'PkgName',
    meta: {
      filterVariant: 'multiselect',
    },
    filterFn: (row, columnId, filterValue: string[]) => {
      return filterValue.includes(row.getValue(columnId));
    },
  },
  {
    id: 'InstalledVersion',
    header: 'Installed Version',
    accessorKey: 'InstalledVersion',
  },
  {
    id: 'FixedVersion',
    header: 'Fixed Version',
    accessorKey: 'FixedVersion',
    // make vertically scrollable text container
    cell: ({ getValue }) => (
      <Typography
        noWrap
        level="body-sm"
        component="div"
        sx={{
          overflow: 'auto',
          '&::-webkit-scrollbar': {
            display: 'none',
          },
          scrollbarWidth: 'none',
          WebkitUserSelect: 'none',
        }}
      >
        {getValue<string>()}
      </Typography>
    ),
  },
];


