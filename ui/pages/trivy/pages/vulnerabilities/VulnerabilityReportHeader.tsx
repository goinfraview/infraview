import React from 'react';
import { type TrivyReport } from '../../parser';
import { Chip, List, ListItem, ListItemContent, ListDivider, Sheet, Typography, Grid } from '@mui/joy';
import { PieChart, pieArcLabelClasses } from '@mui/x-charts/PieChart';
import Icon from '@/components/icons/Icon';
import { formatDistance } from 'date-fns';
import { darken } from '@mui/material';

type Props = {
  report: TrivyReport;
};

const ReportInfoHeader: React.FC<Props> = ({ report }) => {
  const sections = [
    { label: 'Type', value: <ArtifactIcon artifactType={report.getArtifactType()} /> },
    { label: 'Name', value: <Typography level='title-sm'>{report.getArtifactName()}</Typography> },
    { label: 'Created At', value: <Typography level='title-sm'>{formatDistance(new Date(report.getCreatedAt()), new Date(), { addSuffix: true } )}</Typography> },
  ];

  return (
    <Grid container>
      <Grid xs={12} lg={7} xl={8} pr={1}>
        <Sheet variant='outlined' sx={{ borderRadius: 'sm' }}>
          <List size='sm'>
            {sections.map((display, index, arr) => (
              <>
                <ListItem key={index}>
                  <ListItemContent
                    sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                    }}
                  >
                    <Typography level="title-sm" component="div">
                      {display.label}
                    </Typography>
                    {display.value} 
                  </ListItemContent>
                </ListItem>
                {index < arr?.length - 1 && <ListDivider />} 
              </>
            ))}
          </List>
        </Sheet>
      </Grid>
      <Grid xs={12} lg={5} xl={4}>
        <Sheet variant='outlined' sx={{ borderRadius: 'sm', p: 1 }}>
          <ReportVulnerabilityChart report={report} />
        </Sheet>
      </Grid>
    </Grid>
  );
};

const ReportVulnerabilityChart: React.FC<{ report: TrivyReport }> = ({ report }) => {
  const breakdown = report.getVulnerabilityBreakdown();

  const colorMap: Record<string, string> = {
    'CRITICAL': darken('#FF0000', 0.3),
    'HIGH': darken('#FFA500', 0.3),
    'MEDIUM': darken('#FFD700', 0.3),
    'LOW': darken('#32CD32', 0.3),
    'UNKNOWN': darken('#808080', 0.3),
  };

  const labelMap: Record<string, string> = {
    'CRITICAL': 'Critical',
    'HIGH': 'High',
    'MEDIUM': 'Medium',
    'LOW': 'Low',
    'UNKNOWN': 'Unknown',
  };

  return (
    <PieChart
      series={[
        {
          data: Object.entries(breakdown).map(([key, value]) => ({
            id: key,
            color: colorMap[key],
            value: value.count,
            label: labelMap[key],
          })),
          // arcLabel: (item) => `${breakdown[item.id].percentage}%`,
          innerRadius: 25,
          outerRadius: 50,
          paddingAngle: 5,
          cornerRadius: 5,
          highlightScope: { faded: 'global', highlighted: 'item' },
          faded: { innerRadius: 30, additionalRadius: -30, color: 'gray' },
        },
      ]}
      sx={{
        [`& .${pieArcLabelClasses.root}`]: {
          fill: 'white',
          fontSize: 14,
        },
      }}
      height={106}
    />
  );
};

const ArtifactIcon: React.FC<{ artifactType: string }> = ({ artifactType }) => {
  let icon = 'LuFile';
  let label = 'Unknown';

  switch (artifactType) {
    case 'container_image':
      icon = 'LuContainer';
      label = 'Container Image';
      break;
    case 'fs_layer':
      icon = 'LuFile';
      label = 'Filesystem';
      break;
    default:
      icon = 'LuFile';
      label = 'Unknown';
      break;
  }

  return (
    <Chip startDecorator={
      <Icon name={icon} size={16} />
    } size='md' variant='plain' color='primary'>
      {label}
    </Chip>
  );
};

export default ReportInfoHeader;
