import React from 'react';
import { type TrivyReport } from '../../parser';
import { Sheet } from '@mui/joy';
import { PieChart, pieArcLabelClasses } from '@mui/x-charts/PieChart';
import { darken } from '@mui/material';

export const ReportVulnerabilityChart: React.FC<{ report: TrivyReport }> = ({ report }) => {
  const breakdown = report.getVulnerabilityBreakdown();

  const colorMap: Record<string, string> = {
    'CRITICAL': darken('#FF0000', 0.3),
    'HIGH': darken('#FFA500', 0.3),
    'MEDIUM': darken('#FFD700', 0.3),
    'LOW': darken('#32CD32', 0.3),
    'UNKNOWN': darken('#808080', 0.3),
  };

  const labelMap: Record<string, string> = {
    'CRITICAL': 'Critical',
    'HIGH': 'High',
    'MEDIUM': 'Medium',
    'LOW': 'Low',
    'UNKNOWN': 'Unknown',
  };

  return (
    <Sheet variant={'outlined'} sx={{ borderRadius: 'sm' }}>
      <PieChart
        series={[
          {
            data: Object.entries(breakdown).map(([key, value]) => ({
              id: key,
              color: colorMap[key],
              value: value.count,
              label: labelMap[key],
            })),
            // arcLabel: (item) => `${breakdown[item.id].percentage}%`,
            innerRadius: 25,
            outerRadius: 50,
            paddingAngle: 5,
            cornerRadius: 5,
            highlightScope: { faded: 'global', highlighted: 'item' },
            faded: { innerRadius: 30, additionalRadius: -30, color: 'gray' },
          },
        ]}
        sx={{
          [`& .${pieArcLabelClasses.root}`]: {
            fill: 'white',
            fontSize: 12,
          },
        }}
        height={150}
      /></Sheet>
  );
};

export default ReportVulnerabilityChart; 
