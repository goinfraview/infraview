// AUTOGENERATED FILE: Do not edit.
package resource

import (
	"github.com/omniview/kubernetes/pkg/plugin/resource/clients"
	"github.com/omniview/kubernetes/pkg/plugin/resource/resourcers"
	"github.com/omniviewdev/plugin-sdk/pkg/resource/types"
	"github.com/omniviewdev/plugin-sdk/pkg/sdk"
	"go.uber.org/zap"

	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/dynamic/dynamicinformer"
  "k8s.io/apimachinery/pkg/runtime/schema"
  {{ range .Packages }}
	{{.ImportName}} "k8s.io/api/{{.ImportPath}}"
  {{- end }}
)

// map of the resource strings to their schema.GroupVersionResource
var resourceMap = map[string]schema.GroupVersionResource{
{{- range .Resources}}
  "{{.Group}}::{{.Version}}::{{.Kind}}": {{.ImportName}}.SchemeGroupVersion.WithResource("{{.SGVRName}}"),
{{- end }}
}

var gvrMap = map[schema.GroupVersionResource]string{
{{- range .Resources}}
  {{.ImportName}}.SchemeGroupVersion.WithResource("{{.SGVRName}}"): "{{.Group}}::{{.Version}}::{{.Kind}}",
{{- end }}
}

// Register registers the resource plugin with the plugin server.
func Register(plugin *sdk.Plugin) {
	logger := zap.S()

	sdk.RegisterResourcePlugin(
		plugin,
		sdk.ResourcePluginOpts[clients.ClientSet, dynamic.Interface, dynamicinformer.DynamicSharedInformerFactory]{
			ClientFactory:      clients.NewKubernetesClientFactory(),
			LoadConnectionFunc: LoadConnectionsFunc,
      InformerOpts:       NewInformerOptions(),
      ResourceGroups:     ResourceGroups,
			Resourcers:         map[types.ResourceMeta]types.Resourcer[clients.ClientSet]{
        {{- range .Resources}}
				{
          Group:   "{{.Group}}", 
          Version: "{{.Version}}", 
          Kind:    "{{.Kind}}",
          Description: `{{.Description}}`,
        }: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
          {{.ImportName}}.SchemeGroupVersion.WithResource("{{.SGVRName}}"),
				),
        {{- end }}
			},
		},
	)
}
